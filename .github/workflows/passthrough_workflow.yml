name: Testing for Passthrough Connectors
run-name: ${{ github.event_name }} triggered test ðŸš€
on:
  push:
    branches:
      - main
  repository_dispatch:
    types: ["new_variable_secret"]
env:
  WORKFLOW_LINK: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKER_REPO }}/passthrough-connector
jobs:
  Lint:
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3.5.3
      - name: GitHub App token
        id: generate_token
        uses: tibdex/github-app-token@v1.7.0
        with:
          app_id: 314287
          private_key: ${{ secrets.APP_TOKEN }}
      - name: Validate JSON and YAML files
        id: validate_files
        uses: GrantBirki/json-yaml-validate@v1.4.0
        with:
          name: File Validation
          output: .github/output/lint.txt
      - name: Set status payload
        if: failure()
        uses: octokit/request-action@v2.1.0
        with:
          route: PATCH /repos/:repository/actions/variables/:variable
          repository: ${{ github.repository }}
          variable: STATUS_PAYLOAD
          name: STATUS_PAYLOAD
          value: ${{ toJson(env.PAYLOAD) }}
        env:
          PAYLOAD: "{\"value\":\"INVALID\", \"short_description\":\"Lint failed on invalid JSON or YAML files\", \"long_description\":\"\", \"link\":\"${{ env.WORKFLOW_LINK }}\"}"
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
  APISpecValidation:
    runs-on: ubuntu-latest
    needs: Lint
    if: ${{ needs.Lint.result == 'success' }}
    steps:
      - name: Install swagger-cli
        run: npm install -g @apidevtools/swagger-cli
      - name: Checkout repo
        uses: actions/checkout@v3.5.3  
      - name: GitHub App token
        id: generate_token
        uses: tibdex/github-app-token@v1.7.0
        with:
          app_id: 314287
          private_key: ${{ secrets.APP_TOKEN }}
      - name: Run validation command
        id: swagger_cli_validation
        run: swagger-cli validate openapi.json
      - name: Set status to ERROR 
        if: failure()
        uses: octokit/request-action@v2.1.0
        with:
          route: PATCH /repos/:repository/actions/variables/:variable
          repository: ${{ github.repository }}
          variable: STATUS_PAYLOAD
          name: STATUS_PAYLOAD
          value: ${{ toJson(env.PAYLOAD) }}
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
          PAYLOAD: "{\"value\":\"ERROR\", \"short_description\":\"Tests failed on invalid API spec\", \"long_description\":\"\", \"link\":\"${{ env.WORKFLOW_LINK }}\"}"
  CheckAuthFields:
    runs-on: ubuntu-latest
    needs: APISpecValidation
    steps:
      - name: GitHub App token
        id: generate_token
        uses: tibdex/github-app-token@v1.7.0
        with:
          app_id: 314287
          private_key: ${{ secrets.APP_TOKEN }}
      - name: Check auth fields exist as env variables
        run: |
          
            if ${{ secrets.SERVER_URL == '' }}; then
              echo "Error: The secret for server_url is not set."
              exit 1
            fi
          
            if ${{ secrets.USERNAME == '' }}; then
              echo "Error: The secret for username is not set."
              exit 1
            fi
          
            if ${{ secrets.PASSWORD == '' }}; then
              echo "Error: The secret for password is not set."
              exit 1
            fi
          
            if ${{ secrets.HEALTH_ENDPOINT == '' }}; then
              echo "Error: The secret for health_endpoint is not set."
              exit 1
            fi
          
      - name: Set status to ERROR 
        if: failure()
        uses: octokit/request-action@v2.1.0
        with:
          route: PATCH /repos/:repository/actions/variables/:variable
          repository: ${{ github.repository }}
          variable: STATUS_PAYLOAD
          name: STATUS_PAYLOAD
          value: ${{ toJson(env.PAYLOAD) }}
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
          PAYLOAD: "{\"value\":\"ERROR\", \"short_description\":\"Test failed due to missing test credentials\", \"long_description\":\"\", \"link\":\"${{ env.WORKFLOW_LINK }}\"}"
  Test:
    runs-on: ubuntu-latest
    needs: CheckAuthFields
    env:
      AUTH_TYPE: ${{ secrets.AUTH_TYPE }}
    
      SERVER_URL: ${{ secrets.SERVER_URL }}
    
      USERNAME: ${{ secrets.USERNAME }}
    
      PASSWORD: ${{ secrets.PASSWORD }}
    
      HEALTH_ENDPOINT: ${{ secrets.HEALTH_ENDPOINT }}
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: GitHub App token
        id: generate_token
        uses: tibdex/github-app-token@v1.7.0
        with:
          app_id: 314287
          private_key: ${{ secrets.APP_TOKEN }}
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
      - name: Checkout Docker container
        run: docker pull ${{ env.IMAGE_NAME }}:latest

      - name: Modify Docker Compose file
        run: |
          # Create a temporary copy of the docker-compose.yml file with the updated image name
          cp ${GITHUB_WORKSPACE}/.github/workflows/util/docker-compose.yml docker-compose-temp.yml
          sed -i 's|test|${{ env.IMAGE_NAME }}:latest|' docker-compose-temp.yml
      
      - name: Set Up Docker Compose
        run: docker-compose -f docker-compose-temp.yml up -d
      
      - name: Cleanup
        if: ${{ always() }}
        run: rm docker-compose-temp.yml

      - name: Wait for container to start
        run: sleep 10s  #Adjust the delay as needed
 
      - name: Call API endpoint using indiesdev/curl action
        uses: indiesdev/curl@v1.1
        id: curl
        with:
          url: "http://localhost:8010${{ secrets.HEALTH_ENDPOINT }}"
          method: "GET"
          log-response: true

      - name: Print API Response
        if: failure()
        run: echo "${{ steps.curl.outputs.body }}"

      - name: Teardown Docker Compose
        if: ${{ always() }}
        run: docker-compose down docker-compose-temp.yml

      - name: Set status to ERROR 
        if: failure()
        uses: octokit/request-action@v2.1.0
        with:
          route: PATCH /repos/:repository/actions/variables/:variable
          repository: ${{ github.repository }}
          variable: STATUS_PAYLOAD
          name: STATUS_PAYLOAD
          value: ${{ toJson(env.PAYLOAD) }}
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
          PAYLOAD: "{\"value\":\"ERROR\", \"short_description\":\"End to end test failed with test credentials and health endpoint\", \"long_description\":\"\", \"link\":\"${{ env.WORKFLOW_LINK }}\"}"
  Success:
    runs-on: ubuntu-latest
    needs: [Lint, APISpecValidation, Test]
    if: ${{ needs.Lint.result == 'success' && needs.APISpecValidation.result == 'success' && needs.Test.result == 'success' }}
    steps:
      - name: GitHub App token
        id: generate_token
        uses: tibdex/github-app-token@v1.7.0
        with:
          app_id: 314287
          private_key: ${{ secrets.APP_TOKEN }}
      - name: Set status to READY 
        uses: octokit/request-action@v2.1.0
        with:
          route: PATCH /repos/:repository/actions/variables/:variable
          repository: ${{ github.repository }}
          variable: STATUS_PAYLOAD
          name: STATUS_PAYLOAD
          value: ${{ toJson(env.PAYLOAD) }}
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
          PAYLOAD: "{\"value\":\"READY\", \"short_description\":\"Ready for deployment\", \"long_description\":\"\", \"link\":\"${{ env.WORKFLOW_LINK }}\"}"